{
    "sourceFile": "src/components/GameScene.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757623249210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757623249205,
            "name": "Commit-0",
            "content": "import { Canvas, useFrame } from \"@react-three/fiber\";\nimport { useRef } from \"react\";\nimport * as THREE from \"three\";\n\nfunction Ground() {\n  return (\n    <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, -0.5, 0]} receiveShadow>\n      <planeGeometry args={[40, 40]} />\n      <meshLambertMaterial color=\"#4ade80\" />\n    </mesh>\n  );\n}\n\nfunction Building({ position, size, color }: { position: [number, number, number], size: [number, number, number], color: string }) {\n  const meshRef = useRef<any>(null);\n  \n  return (\n    <mesh ref={meshRef} position={position} castShadow receiveShadow>\n      <boxGeometry args={size} />\n      <meshLambertMaterial color={color} />\n    </mesh>\n  );\n}\n\nfunction Hive({ position }: { position: [number, number, number] }) {\n  return (\n    <group position={position}>\n      {/* Main hive structure */}\n      <mesh position={[0, 0.5, 0]} castShadow receiveShadow>\n        <cylinderGeometry args={[0.8, 1, 1.5, 6]} />\n        <meshLambertMaterial color=\"#fbbf24\" />\n      </mesh>\n      {/* Hive roof */}\n      <mesh position={[0, 1.4, 0]} castShadow receiveShadow>\n        <coneGeometry args={[1, 0.6, 6]} />\n        <meshLambertMaterial color=\"#f59e0b\" />\n      </mesh>\n    </group>\n  );\n}\n\nfunction DynamicLighting() {\n  const sunRef = useRef<THREE.DirectionalLight>(null);\n  const moonRef = useRef<THREE.DirectionalLight>(null);\n\n  useFrame((state) => {\n    const time = state.clock.getElapsedTime() * 0.2; // Slow down the cycle\n    \n    // Sun position - circular path around the scene\n    const sunX = Math.cos(time) * 25;\n    const sunY = Math.sin(time) * 15 + 5;\n    const sunZ = Math.sin(time) * 25;\n    \n    // Moon position - opposite to sun\n    const moonX = -sunX;\n    const moonY = -sunY;\n    const moonZ = -sunZ;\n    \n    if (sunRef.current) {\n      sunRef.current.position.set(sunX, sunY, sunZ);\n      sunRef.current.target.position.set(0, 0, 0);\n      sunRef.current.target.updateMatrixWorld();\n      \n      // Sun intensity based on height (day/night cycle)\n      const sunIntensity = Math.max(0, sunY / 15);\n      sunRef.current.intensity = sunIntensity * 1.2;\n      \n      // Sun color changes throughout day\n      const sunColor = new THREE.Color();\n      if (sunY > 10) {\n        // Noon - bright white\n        sunColor.setRGB(1, 1, 0.9);\n      } else if (sunY > 0) {\n        // Dawn/Dusk - orange\n        sunColor.setRGB(1, 0.6, 0.3);\n      } else {\n        // Below horizon - no light\n        sunColor.setRGB(0, 0, 0);\n      }\n      sunRef.current.color = sunColor;\n    }\n    \n    if (moonRef.current) {\n      moonRef.current.position.set(moonX, Math.max(moonY, 2), moonZ);\n      moonRef.current.target.position.set(0, 0, 0);\n      moonRef.current.target.updateMatrixWorld();\n      \n      // Moon intensity when sun is down\n      const moonIntensity = sunY < 0 ? Math.max(0, -sunY / 15) : 0;\n      moonRef.current.intensity = moonIntensity * 0.3;\n      \n      // Moon color - blue-ish white\n      moonRef.current.color.setRGB(0.8, 0.9, 1);\n    }\n  });\n\n  return (\n    <>\n      {/* Ambient light changes with time of day */}\n      <ambientLight intensity={0.2} color=\"#87CEEB\" />\n      \n      {/* Sun */}\n      <directionalLight\n        ref={sunRef}\n        castShadow\n        shadow-mapSize-width={2048}\n        shadow-mapSize-height={2048}\n        shadow-camera-far={50}\n        shadow-camera-left={-20}\n        shadow-camera-right={20}\n        shadow-camera-top={20}\n        shadow-camera-bottom={-20}\n      />\n      \n      {/* Moon */}\n      <directionalLight\n        ref={moonRef}\n        castShadow\n        shadow-mapSize-width={1024}\n        shadow-mapSize-height={1024}\n        shadow-camera-far={50}\n        shadow-camera-left={-20}\n        shadow-camera-right={20}\n        shadow-camera-top={20}\n        shadow-camera-bottom={-20}\n      />\n    </>\n  );\n}\n\nfunction Scene() {\n  return (\n    <>\n      {/* Dynamic Lighting System */}\n      <DynamicLighting />\n\n      {/* Ground - larger field */}\n      <Ground />\n\n      {/* Buildings/Structures - sitting properly on ground */}\n      <Building position={[-8, 0.5, -6]} size={[1.5, 1, 2]} color=\"#8b5cf6\" />\n      <Building position={[6, 0.75, -8]} size={[2, 1.5, 1.5]} color=\"#ef4444\" />\n      <Building position={[-4, 0.25, 4]} size={[1, 0.5, 1]} color=\"#06b6d4\" />\n      <Building position={[8, 1, 4]} size={[1.8, 2, 1.2]} color=\"#f97316\" />\n      <Building position={[-10, 0.4, 0]} size={[1.2, 0.8, 1]} color=\"#a855f7\" />\n      <Building position={[0, 0.15, -10]} size={[0.8, 0.3, 0.8]} color=\"#22c55e\" />\n      <Building position={[10, 0.3, -2]} size={[1, 0.6, 1.5]} color=\"#ec4899\" />\n\n      {/* Hives - sitting properly on ground */}\n      <Hive position={[-2, 0, -2]} />\n      <Hive position={[3, 0, 2]} />\n      <Hive position={[-6, 0, 2]} />\n      <Hive position={[4, 0, -4]} />\n      <Hive position={[0, 0, 6]} />\n      <Hive position={[-8, 0, -4]} />\n\n      {/* Additional decorative elements */}\n      <Building position={[12, 0.2, 6]} size={[0.6, 0.4, 0.6]} color=\"#fbbf24\" />\n      <Building position={[-12, 0.3, -8]} size={[0.8, 0.6, 0.8]} color=\"#f97316\" />\n    </>\n  );\n}\n\nexport function GameScene() {\n  const isDragging = useRef(false);\n  const previousMouse = useRef({ x: 0, y: 0 });\n  const cameraPosition = useRef({ x: 0, z: 0 });\n\n  const handleMouseDown = (event: React.MouseEvent) => {\n    isDragging.current = true;\n    previousMouse.current = { x: event.clientX, y: event.clientY };\n  };\n\n  const handleMouseMove = (event: React.MouseEvent) => {\n    if (!isDragging.current) return;\n\n    const deltaX = event.clientX - previousMouse.current.x;\n    const deltaY = event.clientY - previousMouse.current.y;\n\n    // Pan the camera (limit the range)\n    const panSpeed = 0.02;\n    const maxPan = 8;\n\n    cameraPosition.current.x = Math.max(-maxPan, Math.min(maxPan, \n      cameraPosition.current.x - deltaX * panSpeed));\n    cameraPosition.current.z = Math.max(-maxPan, Math.min(maxPan, \n      cameraPosition.current.z - deltaY * panSpeed));\n\n    previousMouse.current = { x: event.clientX, y: event.clientY };\n  };\n\n  const handleMouseUp = () => {\n    isDragging.current = false;\n  };\n\n  return (\n    <div \n      className=\"absolute inset-0 w-full h-full cursor-grab active:cursor-grabbing\"\n      onMouseDown={handleMouseDown}\n      onMouseMove={handleMouseMove}\n      onMouseUp={handleMouseUp}\n      onMouseLeave={handleMouseUp}\n    >\n      <Canvas\n        shadows\n        camera={{ \n          position: [12, 8, 12], \n          fov: 45,\n          near: 0.1,\n          far: 100\n        }}\n        style={{ background: 'transparent' }}\n        onCreated={({ camera }) => {\n          const updateCamera = () => {\n            camera.position.x = 12 + cameraPosition.current.x;\n            camera.position.z = 12 + cameraPosition.current.z;\n            camera.lookAt(cameraPosition.current.x, 0, cameraPosition.current.z);\n          };\n          \n          const animate = () => {\n            updateCamera();\n            requestAnimationFrame(animate);\n          };\n          animate();\n        }}\n      >\n        <Scene />\n      </Canvas>\n    </div>\n  );\n}"
        }
    ]
}