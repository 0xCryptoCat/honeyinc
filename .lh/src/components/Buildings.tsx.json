{
    "sourceFile": "src/components/Buildings.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1757743143031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757743154955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   upgradeable: boolean;\n }\n \n export const BUILDING_TYPES: Record<string, BuildingType> = {\n-    // \n+    // Hives\n   basic_hive: {\n     id: 'basic_hive',\n     name: 'Basic Hive',\n     category: 'hive',\n@@ -30,8 +30,10 @@\n     baseSize: [2, 2.5, 2],\n     baseColor: '#f59e0b',\n     upgradeable: true\n   },\n+\n+  // Labs\n   research_lab: {\n     id: 'research_lab',\n     name: 'Research Laboratory',\n     category: 'lab',\n"
                },
                {
                    "date": 1757743162011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,10 @@\n     baseSize: [2.5, 2, 2.5],\n     baseColor: '#8b5cf6',\n     upgradeable: true\n   },\n+\n+  // Depots\n   honey_extractor: {\n     id: 'honey_extractor',\n     name: 'Honey Extractor',\n     category: 'storage',\n"
                },
                {
                    "date": 1757743171669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,8 +61,10 @@\n     baseSize: [3, 1.5, 3],\n     baseColor: '#ef4444',\n     upgradeable: true\n   },\n+\n+    // Colonies\n   bee_colony: {\n     id: 'bee_colony',\n     name: 'Bee Colony',\n     category: 'colony',\n"
                },
                {
                    "date": 1757743178603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     baseColor: '#ef4444',\n     upgradeable: true\n   },\n \n-    // Colonies\n+  // Colonies\n   bee_colony: {\n     id: 'bee_colony',\n     name: 'Bee Colony',\n     category: 'colony',\n"
                },
                {
                    "date": 1757743186024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,10 @@\n     baseSize: [2, 3, 2],\n     baseColor: '#06b6d4',\n     upgradeable: true\n   },\n+\n+  \n   shipping_depot: {\n     id: 'shipping_depot',\n     name: 'Shipping Depot',\n     category: 'depot',\n"
                },
                {
                    "date": 1757743195121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     baseColor: '#8b5cf6',\n     upgradeable: true\n   },\n \n-  // Depots\n+  // Storage\n   honey_extractor: {\n     id: 'honey_extractor',\n     name: 'Honey Extractor',\n     category: 'storage',\n@@ -53,9 +53,9 @@\n     baseColor: '#06b6d4',\n     upgradeable: true\n   },\n \n-  \n+    // Depot\n   shipping_depot: {\n     id: 'shipping_depot',\n     name: 'Shipping Depot',\n     category: 'depot',\n"
                },
                {
                    "date": 1757743202754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   upgradeable: boolean;\n }\n \n export const BUILDING_TYPES: Record<string, BuildingType> = {\n-    // Hives\n+   // Hives\n   basic_hive: {\n     id: 'basic_hive',\n     name: 'Basic Hive',\n     category: 'hive',\n@@ -53,9 +53,9 @@\n     baseColor: '#06b6d4',\n     upgradeable: true\n   },\n \n-    // Depot\n+  // Depot\n   shipping_depot: {\n     id: 'shipping_depot',\n     name: 'Shipping Depot',\n     category: 'depot',\n"
                },
                {
                    "date": 1757743207989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   upgradeable: boolean;\n }\n \n export const BUILDING_TYPES: Record<string, BuildingType> = {\n-   // Hives\n+  // Hives\n   basic_hive: {\n     id: 'basic_hive',\n     name: 'Basic Hive',\n     category: 'hive',\n"
                },
                {
                    "date": 1757743359890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n }\n \n export const Building = forwardRef<THREE.Group, BuildingProps>(\n   ({ buildingType, level, position, onClick }, ref) => {\n-    const sizeMultiplier = 1 + (level - 1) * 0.2; // Grow by 20% per level\n+    const sizeMultiplier = 1 + (level - 1) * 0.1; // Grow by 20% per level\n     const size: [number, number, number] = [\n       buildingType.baseSize[0] * sizeMultiplier,\n       buildingType.baseSize[1] * sizeMultiplier,\n       buildingType.baseSize[2] * sizeMultiplier\n"
                },
                {
                    "date": 1757743359896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n }\n \n export const Building = forwardRef<THREE.Group, BuildingProps>(\n   ({ buildingType, level, position, onClick }, ref) => {\n-    const sizeMultiplier = 1 + (level - 1) * 0.1; // Grow by 20% per level\n+    const sizeMultiplier = 1 + (level - 1) * 0.2; // Grow by 20% per level\n     const size: [number, number, number] = [\n       buildingType.baseSize[0] * sizeMultiplier,\n       buildingType.baseSize[1] * sizeMultiplier,\n       buildingType.baseSize[2] * sizeMultiplier\n"
                },
                {
                    "date": 1757743664939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,253 @@\n+import { forwardRef } from 'react';\n+import * as THREE from 'three';\n+\n+export interface BuildingType {\n+  id: string;\n+  name: string;\n+  category: 'hive' | 'lab' | 'depot' | 'storage' | 'colony';\n+  maxLevel: number;\n+  baseSize: [number, number, number];\n+  baseColor: string;\n+  upgradeable: boolean;\n+}\n+\n+export const BUILDING_TYPES: Record<string, BuildingType> = {\n+  // Hives\n+  basic_hive: {\n+    id: 'basic_hive',\n+    name: 'Basic Hive',\n+    category: 'hive',\n+    maxLevel: 5,\n+    baseSize: [1.5, 1.5, 1.5],\n+    baseColor: '#fbbf24',\n+    upgradeable: true\n+  },\n+  royal_hive: {\n+    id: 'royal_hive',\n+    name: 'Royal Hive',\n+    category: 'hive',\n+    maxLevel: 3,\n+    baseSize: [2, 2.5, 2],\n+    baseColor: '#f59e0b',\n+    upgradeable: true\n+  },\n+\n+  // Labs\n+  research_lab: {\n+    id: 'research_lab',\n+    name: 'Research Laboratory',\n+    category: 'lab',\n+    maxLevel: 8,\n+    baseSize: [2.5, 2, 2.5],\n+    baseColor: '#8b5cf6',\n+    upgradeable: true\n+  },\n+\n+  // Storage\n+  honey_extractor: {\n+    id: 'honey_extractor',\n+    name: 'Honey Extractor',\n+    category: 'storage',\n+    maxLevel: 6,\n+    baseSize: [2, 3, 2],\n+    baseColor: '#06b6d4',\n+    upgradeable: true\n+  },\n+\n+  // Depot\n+  shipping_depot: {\n+    id: 'shipping_depot',\n+    name: 'Shipping Depot',\n+    category: 'depot',\n+    maxLevel: 4,\n+    baseSize: [3, 1.5, 3],\n+    baseColor: '#ef4444',\n+    upgradeable: true\n+  },\n+\n+  // Colonies\n+  bee_colony: {\n+    id: 'bee_colony',\n+    name: 'Bee Colony',\n+    category: 'colony',\n+    maxLevel: 7,\n+    baseSize: [1.8, 1.2, 1.8],\n+    baseColor: '#22c55e',\n+    upgradeable: true\n+  }\n+};\n+\n+interface BuildingProps {\n+  buildingType: BuildingType;\n+  level: number;\n+  position: [number, number, number];\n+  onClick?: () => void;\n+}\n+\n+export const Building = forwardRef<THREE.Group, BuildingProps>(\n+  ({ buildingType, level, position, onClick }, ref) => {\n+    const sizeMultiplier = 1 + (level - 1) * 0.2; // Grow by 20% per level\n+    const size: [number, number, number] = [\n+      buildingType.baseSize[0] * sizeMultiplier,\n+      buildingType.baseSize[1] * sizeMultiplier,\n+      buildingType.baseSize[2] * sizeMultiplier\n+    ];\n+\n+    const adjustedPosition: [number, number, number] = [\n+      position[0],\n+      position[1] + size[1] / 2, // Sit on ground\n+      position[2]\n+    ];\n+\n+    const getBuildingShape = () => {\n+      switch (buildingType.category) {\n+        case 'hive':\n+          return (\n+            <group>\n+              {/* Main hive body */}\n+              <mesh position={[0, 0, 0]} castShadow receiveShadow onClick={onClick}>\n+                <cylinderGeometry args={[size[0] * 0.8, size[0], size[1] * 0.8, 6]} />\n+                <meshLambertMaterial color={buildingType.baseColor} />\n+              </mesh>\n+              {/* Hive top */}\n+              <mesh position={[0, size[1] * 0.6, 0]} castShadow receiveShadow>\n+                <coneGeometry args={[size[0] * 0.9, size[1] * 0.4, 6]} />\n+                <meshLambertMaterial color={new THREE.Color(buildingType.baseColor).multiplyScalar(0.8)} />\n+              </mesh>\n+              {/* Level indicator stripes */}\n+              {Array.from({ length: level }, (_, i) => (\n+                <mesh key={i} position={[0, -size[1] * 0.3 + i * 0.1, 0]} castShadow receiveShadow>\n+                  <cylinderGeometry args={[size[0] * 1.1, size[0] * 1.1, 0.05, 6]} />\n+                  <meshLambertMaterial color=\"#f59e0b\" />\n+                </mesh>\n+              ))}\n+            </group>\n+          );\n+\n+        case 'lab':\n+          return (\n+            <group>\n+              {/* Main lab building */}\n+              <mesh position={[0, 0, 0]} castShadow receiveShadow onClick={onClick}>\n+                <boxGeometry args={size} />\n+                <meshLambertMaterial color={buildingType.baseColor} />\n+              </mesh>\n+              {/* Lab equipment on top */}\n+              <mesh position={[0, size[1] * 0.6, 0]} castShadow receiveShadow>\n+                <cylinderGeometry args={[size[0] * 0.3, size[0] * 0.3, size[1] * 0.2]} />\n+                <meshLambertMaterial color=\"#a855f7\" />\n+              </mesh>\n+              {/* Level indicator windows */}\n+              {Array.from({ length: Math.min(level, 4) }, (_, i) => (\n+                <mesh key={i} position={[size[0] * 0.4, -size[1] * 0.2 + i * 0.3, size[2] * 0.5]} castShadow receiveShadow>\n+                  <boxGeometry args={[0.1, 0.2, 0.1]} />\n+                  <meshLambertMaterial color=\"#60a5fa\" emissive=\"#1e40af\" emissiveIntensity={0.2} />\n+                </mesh>\n+              ))}\n+            </group>\n+          );\n+\n+        case 'depot':\n+          return (\n+            <group>\n+              {/* Main depot building */}\n+              <mesh position={[0, 0, 0]} castShadow receiveShadow onClick={onClick}>\n+                <boxGeometry args={size} />\n+                <meshLambertMaterial color={buildingType.baseColor} />\n+              </mesh>\n+              {/* Loading dock */}\n+              <mesh position={[size[0] * 0.6, -size[1] * 0.3, 0]} castShadow receiveShadow>\n+                <boxGeometry args={[size[0] * 0.4, size[1] * 0.4, size[2] * 0.8]} />\n+                <meshLambertMaterial color={new THREE.Color(buildingType.baseColor).multiplyScalar(0.9)} />\n+              </mesh>\n+            </group>\n+          );\n+\n+        case 'storage':\n+          return (\n+            <group>\n+              {/* Main storage silo */}\n+              <mesh position={[0, 0, 0]} castShadow receiveShadow onClick={onClick}>\n+                <cylinderGeometry args={[size[0], size[0], size[1], 8]} />\n+                <meshLambertMaterial color={buildingType.baseColor} />\n+              </mesh>\n+              {/* Storage levels */}\n+              {Array.from({ length: Math.min(level, 6) }, (_, i) => (\n+                <mesh key={i} position={[0, -size[1] * 0.4 + i * (size[1] * 0.8 / 6), 0]} castShadow receiveShadow>\n+                  <cylinderGeometry args={[size[0] * 1.05, size[0] * 1.05, 0.02, 8]} />\n+                  <meshLambertMaterial color=\"#374151\" />\n+                </mesh>\n+              ))}\n+            </group>\n+          );\n+\n+        case 'colony':\n+          return (\n+            <group>\n+              {/* Main colony structure */}\n+              <mesh position={[0, 0, 0]} castShadow receiveShadow onClick={onClick}>\n+                <sphereGeometry args={[size[0], 8, 6]} />\n+                <meshLambertMaterial color={buildingType.baseColor} />\n+              </mesh>\n+              {/* Colony nodes */}\n+              {Array.from({ length: Math.min(level, 4) }, (_, i) => {\n+                const angle = (i / 4) * Math.PI * 2;\n+                const x = Math.cos(angle) * size[0] * 0.7;\n+                const z = Math.sin(angle) * size[0] * 0.7;\n+                return (\n+                  <mesh key={i} position={[x, size[1] * 0.2, z]} castShadow receiveShadow>\n+                    <sphereGeometry args={[size[0] * 0.3, 6, 4]} />\n+                    <meshLambertMaterial color={new THREE.Color(buildingType.baseColor).multiplyScalar(1.2)} />\n+                  </mesh>\n+                );\n+              })}\n+            </group>\n+          );\n+\n+        default:\n+          return (\n+            <mesh position={[0, 0, 0]} castShadow receiveShadow onClick={onClick}>\n+              <boxGeometry args={size} />\n+              <meshLambertMaterial color={buildingType.baseColor} />\n+            </mesh>\n+          );\n+      }\n+    };\n+\n+    return (\n+      <group ref={ref} position={adjustedPosition}>\n+        {getBuildingShape()}\n+        {/* Hover glow effect could be added here */}\n+      </group>\n+    );\n+  }\n+);\n+\n+Building.displayName = 'Building';\n+\n+// Component that takes buildingType as string ID\n+interface BuildingComponentProps {\n+  buildingType: string;\n+  level: number;\n+  position: [number, number, number];\n+  onClick?: () => void;\n+}\n+\n+export function BuildingComponent({ buildingType, level, position, onClick }: BuildingComponentProps) {\n+  const buildingTypeObj = getBuildingTypeById(buildingType);\n+  \n+  if (!buildingTypeObj) {\n+    console.warn(`Building type \"${buildingType}\" not found`);\n+    return null;\n+  }\n+  \n+  return <Building buildingType={buildingTypeObj} level={level} position={position} onClick={onClick} />;\n+}\n+\n+export function getBuildingTypeById(id: string): BuildingType | null {\n+  return BUILDING_TYPES[id] || null;\n+}\n+\n+export function getBuildingsByCategory(category: BuildingType['category']): BuildingType[] {\n+  return Object.values(BUILDING_TYPES).filter(building => building.category === category);\n+}\n"
                }
            ],
            "date": 1757743143031,
            "name": "Commit-0",
            "content": "import { forwardRef } from 'react';\nimport * as THREE from 'three';\n\nexport interface BuildingType {\n  id: string;\n  name: string;\n  category: 'hive' | 'lab' | 'depot' | 'storage' | 'colony';\n  maxLevel: number;\n  baseSize: [number, number, number];\n  baseColor: string;\n  upgradeable: boolean;\n}\n\nexport const BUILDING_TYPES: Record<string, BuildingType> = {\n    // \n  basic_hive: {\n    id: 'basic_hive',\n    name: 'Basic Hive',\n    category: 'hive',\n    maxLevel: 5,\n    baseSize: [1.5, 1.5, 1.5],\n    baseColor: '#fbbf24',\n    upgradeable: true\n  },\n  royal_hive: {\n    id: 'royal_hive',\n    name: 'Royal Hive',\n    category: 'hive',\n    maxLevel: 3,\n    baseSize: [2, 2.5, 2],\n    baseColor: '#f59e0b',\n    upgradeable: true\n  },\n  research_lab: {\n    id: 'research_lab',\n    name: 'Research Laboratory',\n    category: 'lab',\n    maxLevel: 8,\n    baseSize: [2.5, 2, 2.5],\n    baseColor: '#8b5cf6',\n    upgradeable: true\n  },\n  honey_extractor: {\n    id: 'honey_extractor',\n    name: 'Honey Extractor',\n    category: 'storage',\n    maxLevel: 6,\n    baseSize: [2, 3, 2],\n    baseColor: '#06b6d4',\n    upgradeable: true\n  },\n  shipping_depot: {\n    id: 'shipping_depot',\n    name: 'Shipping Depot',\n    category: 'depot',\n    maxLevel: 4,\n    baseSize: [3, 1.5, 3],\n    baseColor: '#ef4444',\n    upgradeable: true\n  },\n  bee_colony: {\n    id: 'bee_colony',\n    name: 'Bee Colony',\n    category: 'colony',\n    maxLevel: 7,\n    baseSize: [1.8, 1.2, 1.8],\n    baseColor: '#22c55e',\n    upgradeable: true\n  }\n};\n\ninterface BuildingProps {\n  buildingType: BuildingType;\n  level: number;\n  position: [number, number, number];\n  onClick?: () => void;\n}\n\nexport const Building = forwardRef<THREE.Group, BuildingProps>(\n  ({ buildingType, level, position, onClick }, ref) => {\n    const sizeMultiplier = 1 + (level - 1) * 0.2; // Grow by 20% per level\n    const size: [number, number, number] = [\n      buildingType.baseSize[0] * sizeMultiplier,\n      buildingType.baseSize[1] * sizeMultiplier,\n      buildingType.baseSize[2] * sizeMultiplier\n    ];\n\n    const adjustedPosition: [number, number, number] = [\n      position[0],\n      position[1] + size[1] / 2, // Sit on ground\n      position[2]\n    ];\n\n    const getBuildingShape = () => {\n      switch (buildingType.category) {\n        case 'hive':\n          return (\n            <group>\n              {/* Main hive body */}\n              <mesh position={[0, 0, 0]} castShadow receiveShadow onClick={onClick}>\n                <cylinderGeometry args={[size[0] * 0.8, size[0], size[1] * 0.8, 6]} />\n                <meshLambertMaterial color={buildingType.baseColor} />\n              </mesh>\n              {/* Hive top */}\n              <mesh position={[0, size[1] * 0.6, 0]} castShadow receiveShadow>\n                <coneGeometry args={[size[0] * 0.9, size[1] * 0.4, 6]} />\n                <meshLambertMaterial color={new THREE.Color(buildingType.baseColor).multiplyScalar(0.8)} />\n              </mesh>\n              {/* Level indicator stripes */}\n              {Array.from({ length: level }, (_, i) => (\n                <mesh key={i} position={[0, -size[1] * 0.3 + i * 0.1, 0]} castShadow receiveShadow>\n                  <cylinderGeometry args={[size[0] * 1.1, size[0] * 1.1, 0.05, 6]} />\n                  <meshLambertMaterial color=\"#f59e0b\" />\n                </mesh>\n              ))}\n            </group>\n          );\n\n        case 'lab':\n          return (\n            <group>\n              {/* Main lab building */}\n              <mesh position={[0, 0, 0]} castShadow receiveShadow onClick={onClick}>\n                <boxGeometry args={size} />\n                <meshLambertMaterial color={buildingType.baseColor} />\n              </mesh>\n              {/* Lab equipment on top */}\n              <mesh position={[0, size[1] * 0.6, 0]} castShadow receiveShadow>\n                <cylinderGeometry args={[size[0] * 0.3, size[0] * 0.3, size[1] * 0.2]} />\n                <meshLambertMaterial color=\"#a855f7\" />\n              </mesh>\n              {/* Level indicator windows */}\n              {Array.from({ length: Math.min(level, 4) }, (_, i) => (\n                <mesh key={i} position={[size[0] * 0.4, -size[1] * 0.2 + i * 0.3, size[2] * 0.5]} castShadow receiveShadow>\n                  <boxGeometry args={[0.1, 0.2, 0.1]} />\n                  <meshLambertMaterial color=\"#60a5fa\" emissive=\"#1e40af\" emissiveIntensity={0.2} />\n                </mesh>\n              ))}\n            </group>\n          );\n\n        case 'depot':\n          return (\n            <group>\n              {/* Main depot building */}\n              <mesh position={[0, 0, 0]} castShadow receiveShadow onClick={onClick}>\n                <boxGeometry args={size} />\n                <meshLambertMaterial color={buildingType.baseColor} />\n              </mesh>\n              {/* Loading dock */}\n              <mesh position={[size[0] * 0.6, -size[1] * 0.3, 0]} castShadow receiveShadow>\n                <boxGeometry args={[size[0] * 0.4, size[1] * 0.4, size[2] * 0.8]} />\n                <meshLambertMaterial color={new THREE.Color(buildingType.baseColor).multiplyScalar(0.9)} />\n              </mesh>\n            </group>\n          );\n\n        case 'storage':\n          return (\n            <group>\n              {/* Main storage silo */}\n              <mesh position={[0, 0, 0]} castShadow receiveShadow onClick={onClick}>\n                <cylinderGeometry args={[size[0], size[0], size[1], 8]} />\n                <meshLambertMaterial color={buildingType.baseColor} />\n              </mesh>\n              {/* Storage levels */}\n              {Array.from({ length: Math.min(level, 6) }, (_, i) => (\n                <mesh key={i} position={[0, -size[1] * 0.4 + i * (size[1] * 0.8 / 6), 0]} castShadow receiveShadow>\n                  <cylinderGeometry args={[size[0] * 1.05, size[0] * 1.05, 0.02, 8]} />\n                  <meshLambertMaterial color=\"#374151\" />\n                </mesh>\n              ))}\n            </group>\n          );\n\n        case 'colony':\n          return (\n            <group>\n              {/* Main colony structure */}\n              <mesh position={[0, 0, 0]} castShadow receiveShadow onClick={onClick}>\n                <sphereGeometry args={[size[0], 8, 6]} />\n                <meshLambertMaterial color={buildingType.baseColor} />\n              </mesh>\n              {/* Colony nodes */}\n              {Array.from({ length: Math.min(level, 4) }, (_, i) => {\n                const angle = (i / 4) * Math.PI * 2;\n                const x = Math.cos(angle) * size[0] * 0.7;\n                const z = Math.sin(angle) * size[0] * 0.7;\n                return (\n                  <mesh key={i} position={[x, size[1] * 0.2, z]} castShadow receiveShadow>\n                    <sphereGeometry args={[size[0] * 0.3, 6, 4]} />\n                    <meshLambertMaterial color={new THREE.Color(buildingType.baseColor).multiplyScalar(1.2)} />\n                  </mesh>\n                );\n              })}\n            </group>\n          );\n\n        default:\n          return (\n            <mesh position={[0, 0, 0]} castShadow receiveShadow onClick={onClick}>\n              <boxGeometry args={size} />\n              <meshLambertMaterial color={buildingType.baseColor} />\n            </mesh>\n          );\n      }\n    };\n\n    return (\n      <group ref={ref} position={adjustedPosition}>\n        {getBuildingShape()}\n        {/* Hover glow effect could be added here */}\n      </group>\n    );\n  }\n);\n\nBuilding.displayName = 'Building';\n\nexport function getBuildingTypeById(id: string): BuildingType | null {\n  return BUILDING_TYPES[id] || null;\n}\n\nexport function getBuildingsByCategory(category: BuildingType['category']): BuildingType[] {\n  return Object.values(BUILDING_TYPES).filter(building => building.category === category);\n}\n"
        }
    ]
}