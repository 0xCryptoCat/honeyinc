{
    "sourceFile": "src/components/Objects.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1757743106878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757743664915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,20 +156,20 @@\n           return (\n             <group>\n               {/* Body */}\n               <mesh position={[0, 0, 0]} castShadow receiveShadow>\n-                <ellipsoidGeometry args={objectType.size} />\n+                <sphereGeometry args={[objectType.size[0], 8, 6]} />\n                 <meshLambertMaterial color={objectType.color} />\n               </mesh>\n               {/* Stripes for bees */}\n               {objectType.category === 'bee' && (\n                 <>\n                   <mesh position={[0, 0, objectType.size[2] * 0.1]} castShadow receiveShadow>\n-                    <ellipsoidGeometry args={[objectType.size[0] * 1.05, objectType.size[1] * 1.05, objectType.size[2] * 0.2]} />\n+                    <sphereGeometry args={[objectType.size[0] * 1.05, 6, 4]} />\n                     <meshLambertMaterial color=\"#000000\" />\n                   </mesh>\n                   <mesh position={[0, 0, -objectType.size[2] * 0.1]} castShadow receiveShadow>\n-                    <ellipsoidGeometry args={[objectType.size[0] * 1.05, objectType.size[1] * 1.05, objectType.size[2] * 0.2]} />\n+                    <sphereGeometry args={[objectType.size[0] * 1.05, 6, 4]} />\n                     <meshLambertMaterial color=\"#000000\" />\n                   </mesh>\n                 </>\n               )}\n@@ -264,15 +264,26 @@\n );\n \n GameObject.displayName = 'GameObject';\n \n-// Custom geometry for ellipsoid (for bee bodies)\n-function ellipsoidGeometry({ args }: { args: [number, number, number] }) {\n-  const geometry = new THREE.SphereGeometry(1, 8, 6);\n-  geometry.scale(args[0], args[1], args[2]);\n-  return <primitive object={geometry} />;\n+// Component that takes objectType as string ID\n+interface ObjectComponentProps {\n+  objectType: string;\n+  position: [number, number, number];\n+  isAnimated?: boolean;\n }\n \n+export function ObjectComponent({ objectType, position, isAnimated = true }: ObjectComponentProps) {\n+  const objectTypeObj = getObjectTypeById(objectType);\n+  \n+  if (!objectTypeObj) {\n+    console.warn(`Object type \"${objectType}\" not found`);\n+    return null;\n+  }\n+  \n+  return <GameObject objectType={objectTypeObj} position={position} isAnimated={isAnimated} />;\n+}\n+\n export function getObjectTypeById(id: string): ObjectType | null {\n   return OBJECT_TYPES[id] || null;\n }\n \n"
                },
                {
                    "date": 1757743780108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,9 +279,9 @@\n     console.warn(`Object type \"${objectType}\" not found`);\n     return null;\n   }\n   \n-  return <GameObject objectType={objectTypeObj} position={position} isAnimated={isAnimated} />;\n+  return <GameObject objectType={objectTypeObj} position={position} />;\n }\n \n export function getObjectTypeById(id: string): ObjectType | null {\n   return OBJECT_TYPES[id] || null;\n"
                },
                {
                    "date": 1757743807389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,9 +271,9 @@\n   position: [number, number, number];\n   isAnimated?: boolean;\n }\n \n-export function ObjectComponent({ objectType, position, isAnimated = true }: ObjectComponentProps) {\n+export function ObjectComponent({ objectType, position }: Omit<ObjectComponentProps, 'isAnimated'>) {\n   const objectTypeObj = getObjectTypeById(objectType);\n   \n   if (!objectTypeObj) {\n     console.warn(`Object type \"${objectType}\" not found`);\n"
                }
            ],
            "date": 1757743106878,
            "name": "Commit-0",
            "content": "import { forwardRef, useRef } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\n\nexport interface ObjectType {\n  id: string;\n  name: string;\n  category: 'bee' | 'wasp' | 'item' | 'box' | 'effect';\n  size: [number, number, number];\n  color: string;\n  animated: boolean;\n  speed?: number;\n  lifespan?: number; // in seconds\n}\n\nexport const OBJECT_TYPES: Record<string, ObjectType> = {\n  worker_bee: {\n    id: 'worker_bee',\n    name: 'Worker Bee',\n    category: 'bee',\n    size: [0.2, 0.15, 0.3],\n    color: '#fbbf24',\n    animated: true,\n    speed: 3,\n    lifespan: 60\n  },\n  wasp: {\n    id: 'wasp',\n    name: 'Wasp',\n    category: 'wasp',\n    size: [0.25, 0.2, 0.4],\n    color: '#dc2626',\n    animated: true,\n    speed: 5,\n    lifespan: 30\n  },\n  honey_jar: {\n    id: 'honey_jar',\n    name: 'Honey Jar',\n    category: 'item',\n    size: [0.3, 0.4, 0.3],\n    color: '#fbbf24',\n    animated: false\n  },\n  pollen_ball: {\n    id: 'pollen_ball',\n    name: 'Pollen Ball',\n    category: 'item',\n    size: [0.15, 0.15, 0.15],\n    color: '#facc15',\n    animated: false\n  },\n  shipping_box: {\n    id: 'shipping_box',\n    name: 'Shipping Box',\n    category: 'box',\n    size: [0.8, 0.6, 0.8],\n    color: '#a16207',\n    animated: false\n  },\n  honey_flow: {\n    id: 'honey_flow',\n    name: 'Honey Flow Effect',\n    category: 'effect',\n    size: [0.1, 0.5, 0.1],\n    color: '#fbbf24',\n    animated: true,\n    speed: 1,\n    lifespan: 3\n  },\n  sparkle: {\n    id: 'sparkle',\n    name: 'Sparkle Effect',\n    category: 'effect',\n    size: [0.05, 0.05, 0.05],\n    color: '#fde047',\n    animated: true,\n    speed: 2,\n    lifespan: 2\n  }\n};\n\ninterface GameObjectProps {\n  objectType: ObjectType;\n  position: [number, number, number];\n  targetPosition?: [number, number, number];\n  isMoving?: boolean;\n  animationOffset?: number;\n  onLifespanEnd?: () => void;\n}\n\nexport const GameObject = forwardRef<THREE.Group, GameObjectProps>(\n  ({ objectType, position, targetPosition, isMoving = false, animationOffset = 0, onLifespanEnd }, _ref) => {\n    const groupRef = useRef<THREE.Group>(null);\n    const currentPos = useRef(new THREE.Vector3(...position));\n    const targetPos = useRef(targetPosition ? new THREE.Vector3(...targetPosition) : null);\n    const timeAlive = useRef(0);\n    const bobOffset = useRef(Math.random() * Math.PI * 2);\n\n    useFrame((state, delta) => {\n      if (!groupRef.current) return;\n\n      timeAlive.current += delta;\n\n      // Handle lifespan\n      if (objectType.lifespan && timeAlive.current >= objectType.lifespan && onLifespanEnd) {\n        onLifespanEnd();\n        return;\n      }\n\n      // Handle movement\n      if (isMoving && targetPos.current && objectType.speed) {\n        const direction = targetPos.current.clone().sub(currentPos.current);\n        const distance = direction.length();\n        \n        if (distance > 0.1) {\n          direction.normalize();\n          const moveSpeed = objectType.speed * delta;\n          currentPos.current.add(direction.multiplyScalar(moveSpeed));\n          groupRef.current.position.copy(currentPos.current);\n        }\n      }\n\n      // Handle animations\n      if (objectType.animated) {\n        const time = state.clock.getElapsedTime() + animationOffset;\n        \n        switch (objectType.category) {\n          case 'bee':\n          case 'wasp':\n            // Flying animation - figure-8 pattern and bobbing\n            const bobHeight = Math.sin(time * 4 + bobOffset.current) * 0.1;\n            const wingFlap = Math.sin(time * 20) * 0.1;\n            groupRef.current.position.y = currentPos.current.y + bobHeight;\n            groupRef.current.rotation.z = wingFlap;\n            break;\n            \n          case 'effect':\n            if (objectType.id === 'honey_flow') {\n              // Flowing animation\n              groupRef.current.scale.y = 1 + Math.sin(time * 3) * 0.3;\n            } else if (objectType.id === 'sparkle') {\n              // Twinkling animation\n              const twinkle = Math.sin(time * 8) * 0.5 + 0.5;\n              groupRef.current.scale.setScalar(twinkle);\n            }\n            break;\n        }\n      }\n    });\n\n    const getObjectShape = () => {\n      switch (objectType.category) {\n        case 'bee':\n        case 'wasp':\n          return (\n            <group>\n              {/* Body */}\n              <mesh position={[0, 0, 0]} castShadow receiveShadow>\n                <ellipsoidGeometry args={objectType.size} />\n                <meshLambertMaterial color={objectType.color} />\n              </mesh>\n              {/* Stripes for bees */}\n              {objectType.category === 'bee' && (\n                <>\n                  <mesh position={[0, 0, objectType.size[2] * 0.1]} castShadow receiveShadow>\n                    <ellipsoidGeometry args={[objectType.size[0] * 1.05, objectType.size[1] * 1.05, objectType.size[2] * 0.2]} />\n                    <meshLambertMaterial color=\"#000000\" />\n                  </mesh>\n                  <mesh position={[0, 0, -objectType.size[2] * 0.1]} castShadow receiveShadow>\n                    <ellipsoidGeometry args={[objectType.size[0] * 1.05, objectType.size[1] * 1.05, objectType.size[2] * 0.2]} />\n                    <meshLambertMaterial color=\"#000000\" />\n                  </mesh>\n                </>\n              )}\n              {/* Wings */}\n              <mesh position={[objectType.size[0] * 0.7, objectType.size[1] * 0.3, 0]} castShadow>\n                <planeGeometry args={[objectType.size[0] * 0.8, objectType.size[2] * 0.6]} />\n                <meshLambertMaterial color=\"#ffffff\" transparent opacity={0.7} />\n              </mesh>\n              <mesh position={[-objectType.size[0] * 0.7, objectType.size[1] * 0.3, 0]} castShadow>\n                <planeGeometry args={[objectType.size[0] * 0.8, objectType.size[2] * 0.6]} />\n                <meshLambertMaterial color=\"#ffffff\" transparent opacity={0.7} />\n              </mesh>\n            </group>\n          );\n\n        case 'item':\n          if (objectType.id === 'honey_jar') {\n            return (\n              <group>\n                {/* Jar body */}\n                <mesh position={[0, 0, 0]} castShadow receiveShadow>\n                  <cylinderGeometry args={[objectType.size[0] * 0.8, objectType.size[0], objectType.size[1], 8]} />\n                  <meshLambertMaterial color={objectType.color} transparent opacity={0.8} />\n                </mesh>\n                {/* Jar lid */}\n                <mesh position={[0, objectType.size[1] * 0.4, 0]} castShadow receiveShadow>\n                  <cylinderGeometry args={[objectType.size[0] * 0.9, objectType.size[0] * 0.9, objectType.size[1] * 0.1, 8]} />\n                  <meshLambertMaterial color=\"#a16207\" />\n                </mesh>\n              </group>\n            );\n          } else if (objectType.id === 'pollen_ball') {\n            return (\n              <mesh position={[0, 0, 0]} castShadow receiveShadow>\n                <sphereGeometry args={[objectType.size[0], 8, 6]} />\n                <meshLambertMaterial color={objectType.color} />\n              </mesh>\n            );\n          }\n          break;\n\n        case 'box':\n          return (\n            <group>\n              {/* Box body */}\n              <mesh position={[0, 0, 0]} castShadow receiveShadow>\n                <boxGeometry args={objectType.size} />\n                <meshLambertMaterial color={objectType.color} />\n              </mesh>\n              {/* Box tape/straps */}\n              <mesh position={[0, objectType.size[1] * 0.5, 0]} castShadow receiveShadow>\n                <boxGeometry args={[objectType.size[0] * 1.05, 0.02, objectType.size[2] * 1.05]} />\n                <meshLambertMaterial color=\"#92400e\" />\n              </mesh>\n            </group>\n          );\n\n        case 'effect':\n          if (objectType.id === 'honey_flow') {\n            return (\n              <mesh position={[0, 0, 0]}>\n                <cylinderGeometry args={[objectType.size[0], objectType.size[0] * 0.5, objectType.size[1], 6]} />\n                <meshLambertMaterial color={objectType.color} transparent opacity={0.6} />\n              </mesh>\n            );\n          } else if (objectType.id === 'sparkle') {\n            return (\n              <mesh position={[0, 0, 0]}>\n                <sphereGeometry args={[objectType.size[0], 6, 4]} />\n                <meshBasicMaterial color={objectType.color} />\n              </mesh>\n            );\n          }\n          break;\n\n        default:\n          return (\n            <mesh position={[0, 0, 0]} castShadow receiveShadow>\n              <boxGeometry args={objectType.size} />\n              <meshLambertMaterial color={objectType.color} />\n            </mesh>\n          );\n      }\n    };\n\n    return (\n      <group ref={groupRef} position={position}>\n        {getObjectShape()}\n      </group>\n    );\n  }\n);\n\nGameObject.displayName = 'GameObject';\n\n// Custom geometry for ellipsoid (for bee bodies)\nfunction ellipsoidGeometry({ args }: { args: [number, number, number] }) {\n  const geometry = new THREE.SphereGeometry(1, 8, 6);\n  geometry.scale(args[0], args[1], args[2]);\n  return <primitive object={geometry} />;\n}\n\nexport function getObjectTypeById(id: string): ObjectType | null {\n  return OBJECT_TYPES[id] || null;\n}\n\nexport function getObjectsByCategory(category: ObjectType['category']): ObjectType[] {\n  return Object.values(OBJECT_TYPES).filter(obj => obj.category === category);\n}\n"
        }
    ]
}