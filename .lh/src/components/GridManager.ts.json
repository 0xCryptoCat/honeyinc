{
    "sourceFile": "src/components/GridManager.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1757743664899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757743807389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,10 +16,8 @@\n \n export class GridManager {\n   private cells: Map<string, GridCell> = new Map();\n   private gridSize = 4; // 4 unit spacing between cells\n-  private gridWidth = 10; // 10x10 grid\n-  private gridHeight = 10;\n \n   constructor() {\n     this.initializeGrid();\n   }\n"
                }
            ],
            "date": 1757743664899,
            "name": "Commit-0",
            "content": "// Grid cell management system for the game map\nexport interface GridCell {\n  id: string;\n  position: [number, number, number]; // x, y, z coordinates\n  type: 'path' | 'hive' | 'colony' | 'lab' | 'depot' | 'storage' | 'environment';\n  occupied: boolean;\n  level: number;\n  buildingId?: string;\n  objectIds: string[];\n}\n\nexport interface GridPosition {\n  x: number;\n  z: number;\n}\n\nexport class GridManager {\n  private cells: Map<string, GridCell> = new Map();\n  private gridSize = 4; // 4 unit spacing between cells\n  private gridWidth = 10; // 10x10 grid\n  private gridHeight = 10;\n\n  constructor() {\n    this.initializeGrid();\n  }\n\n  private initializeGrid() {\n    // Create predefined cells for different sections\n    const cellConfigs = [\n      // Path cells (for movement)\n      { type: 'path' as const, positions: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0]] },\n      \n      // Hive cells (for individual hives)\n      { type: 'hive' as const, positions: [[-2, -2], [0, -2], [2, -2], [4, -2]] },\n      \n      // Colony cells (for bee colonies)\n      { type: 'colony' as const, positions: [[-4, -4], [-2, -4], [0, -4], [2, -4]] },\n      \n      // Lab cells (for research facilities)\n      { type: 'lab' as const, positions: [[-4, 2], [-2, 2]] },\n      \n      // Depot cells (for shipping/vehicles)\n      { type: 'depot' as const, positions: [[2, 2], [4, 2]] },\n      \n      // Storage cells (for resources)\n      { type: 'storage' as const, positions: [[-4, 4], [-2, 4], [0, 4]] },\n      \n      // Environment cells (for decoration/effects)\n      { type: 'environment' as const, positions: [[2, 4], [4, 4], [-4, -2], [4, -4]] }\n    ];\n\n    cellConfigs.forEach(config => {\n      config.positions.forEach(([x, z], index) => {\n        const cellId = `${config.type}_${index}`;\n        const worldPos: [number, number, number] = [\n          x * this.gridSize,\n          0,\n          z * this.gridSize\n        ];\n\n        this.cells.set(cellId, {\n          id: cellId,\n          position: worldPos,\n          type: config.type,\n          occupied: false,\n          level: 1,\n          objectIds: []\n        });\n      });\n    });\n  }\n\n  getCellAt(gridX: number, gridZ: number): GridCell | null {\n    const worldX = gridX * this.gridSize;\n    const worldZ = gridZ * this.gridSize;\n    \n    for (const cell of this.cells.values()) {\n      if (Math.abs(cell.position[0] - worldX) < 0.1 && \n          Math.abs(cell.position[2] - worldZ) < 0.1) {\n        return cell;\n      }\n    }\n    return null;\n  }\n\n  getCellById(id: string): GridCell | null {\n    return this.cells.get(id) || null;\n  }\n\n  getCellsByType(type: GridCell['type']): GridCell[] {\n    return Array.from(this.cells.values()).filter(cell => cell.type === type);\n  }\n\n  occupyCell(cellId: string, buildingId: string): boolean {\n    const cell = this.cells.get(cellId);\n    if (cell && !cell.occupied) {\n      cell.occupied = true;\n      cell.buildingId = buildingId;\n      return true;\n    }\n    return false;\n  }\n\n  vacateCell(cellId: string): boolean {\n    const cell = this.cells.get(cellId);\n    if (cell && cell.occupied) {\n      cell.occupied = false;\n      cell.buildingId = undefined;\n      return true;\n    }\n    return false;\n  }\n\n  addObjectToCell(cellId: string, objectId: string): boolean {\n    const cell = this.cells.get(cellId);\n    if (cell) {\n      cell.objectIds.push(objectId);\n      return true;\n    }\n    return false;\n  }\n\n  removeObjectFromCell(cellId: string, objectId: string): boolean {\n    const cell = this.cells.get(cellId);\n    if (cell) {\n      const index = cell.objectIds.indexOf(objectId);\n      if (index > -1) {\n        cell.objectIds.splice(index, 1);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  upgradeCell(cellId: string): boolean {\n    const cell = this.cells.get(cellId);\n    if (cell && cell.level < 10) { // Max level 10\n      cell.level++;\n      return true;\n    }\n    return false;\n  }\n\n  getAllCells(): GridCell[] {\n    return Array.from(this.cells.values());\n  }\n\n  worldToGrid(worldX: number, worldZ: number): GridPosition {\n    return {\n      x: Math.round(worldX / this.gridSize),\n      z: Math.round(worldZ / this.gridSize)\n    };\n  }\n\n  gridToWorld(gridX: number, gridZ: number): [number, number, number] {\n    return [gridX * this.gridSize, 0, gridZ * this.gridSize];\n  }\n}\n"
        }
    ]
}