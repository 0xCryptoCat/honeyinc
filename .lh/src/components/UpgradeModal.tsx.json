{
    "sourceFile": "src/components/UpgradeModal.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757743664891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757743664891,
            "name": "Commit-0",
            "content": "import { X, Building, Home, ArrowUp, RefreshCw } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\ninterface Upgrade {\n  id: string;\n  name: string;\n  description: string;\n  cost: number;\n  level: number;\n  maxLevel: number;\n}\n\ninterface HiveSlot {\n  id: number;\n  tier: number;\n  maxTier: number;\n  capacity: number;\n  occupancy: number;\n  upgradeCost: number;\n  replaceCost: number;\n}\n\ninterface UpgradeModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title: string;\n  capacity: number;\n  utilization: number;\n  upgrades: Upgrade[];\n  onUpgrade: (upgradeId: string) => void;\n  onUpgradeHive?: (slotId: number) => void;\n  onReplaceHive?: (slotId: number) => void;\n  currentCash?: number;\n  initialTab?: string;\n}\n\nexport function UpgradeModal({\n  isOpen,\n  onClose,\n  title,\n  capacity,\n  utilization,\n  upgrades,\n  onUpgrade,\n  onUpgradeHive,\n  onReplaceHive,\n  currentCash = 850000,\n  initialTab = \"buildings\"\n}: UpgradeModalProps) {\n  const [activeTab, setActiveTab] = useState(\"buildings\"); // Always start with default\n  const [selectedHiveSlot, setSelectedHiveSlot] = useState<number | null>(null);\n\n  // Reset tab when modal opens with new initialTab\n  useEffect(() => {\n    if (isOpen) {\n      setActiveTab(initialTab || \"buildings\");\n      console.log(\"UpgradeModal: Setting initial tab to:\", initialTab); // Debug log\n    }\n  }, [isOpen, initialTab]);\n\n  const tabs = [\n    { id: \"buildings\", label: \"Buildings\", icon: Building },\n    { id: \"hives\", label: \"Hives\", icon: Home }\n  ];\n\n  const hiveSlots: HiveSlot[] = [\n    {\n      id: 1,\n      tier: 8,\n      maxTier: 19,\n      capacity: 12500,\n      occupancy: 11200,\n      upgradeCost: 125000,\n      replaceCost: 89000\n    },\n    {\n      id: 2,\n      tier: 6,\n      maxTier: 19,\n      capacity: 8500,\n      occupancy: 8500,\n      upgradeCost: 85000,\n      replaceCost: 65000\n    },\n    {\n      id: 3,\n      tier: 10,\n      maxTier: 19,\n      capacity: 18000,\n      occupancy: 15600,\n      upgradeCost: 185000,\n      replaceCost: 142000\n    },\n    {\n      id: 4,\n      tier: 4,\n      maxTier: 19,\n      capacity: 5200,\n      occupancy: 5200,\n      upgradeCost: 52000,\n      replaceCost: 38000\n    }\n  ];\n\n  const getHiveName = (tier: number) => {\n    const names = [\n      \"\", \"Coop\", \"Shack\", \"Super Shack\", \"Short House\", \"The Standard\",\n      \"Long House\", \"Double Decker\", \"Warehouse\", \"Center\", \"Bunker\",\n      \"Eggkea\", \"Super Bunker\", \"Egg Antique\", \"Rich\", \"Eggcelsior\",\n      \"Chicken Palace\", \"Royal Dome\", \"Universe\", \"Edifis\", \"Monolith\"\n    ];\n    return names[tier] || `Tier ${tier}`;\n  };\n\n  const getOccupancyColor = (occupancy: number, capacity: number) => {\n    const percentage = (occupancy / capacity) * 100;\n    if (percentage >= 100) return \"from-red-400 to-red-600\";\n    if (percentage >= 80) return \"from-yellow-400 to-yellow-600\";\n    return \"from-green-400 to-green-600\";\n  };\n\n  const canAfford = (cost: number) => currentCash >= cost;\n\n  const selectedHive = selectedHiveSlot ? hiveSlots.find(h => h.id === selectedHiveSlot) : null;\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <div className=\"relative bg-gradient-to-b from-white via-amber-50 to-amber-100 rounded-3xl p-6 w-full max-w-lg shadow-2xl border-4 border-amber-300 max-h-[90vh] overflow-y-auto\">\n        {/* Shadow for 3D effect */}\n        <div className=\"absolute inset-0 transform translate-y-2 bg-amber-900/20 rounded-3xl -z-10\" />\n        \n        {/* Inner highlight */}\n        <div className=\"absolute inset-0 bg-gradient-to-b from-white/30 via-white/10 to-transparent rounded-3xl\" />\n        \n        {/* Close button */}\n        <button\n          onClick={onClose}\n          className=\"absolute top-4 right-4 w-8 h-8 bg-gradient-to-br from-red-500 to-red-600 rounded-full flex items-center justify-center text-white hover:scale-110 transition-transform shadow-lg border-2 border-red-400 z-10\"\n        >\n          <X className=\"w-4 h-4\" />\n        </button>\n\n        {/* Header */}\n        <div className=\"text-center mb-6 relative\">\n          <h2 className=\"text-amber-900 font-bold text-xl mb-2\">{title}</h2>\n          <div className=\"flex justify-center\">\n            <div className=\"bg-amber-200 h-1 w-16 rounded-full shadow-inner\">\n              <div className=\"bg-gradient-to-r from-amber-400 to-amber-500 h-full w-full rounded-full shadow-sm\"></div>\n            </div>\n          </div>\n        </div>\n\n        {/* Tab Navigation - Toggle Switch Style */}\n        <div className=\"flex mb-6 bg-amber-200/50 p-1 rounded-xl\">\n          <div className=\"relative flex w-full\">\n            {/* Sliding indicator */}\n            <div \n              className=\"absolute top-1 left-1 bottom-1 bg-gradient-to-r from-amber-400 to-amber-500 rounded-lg shadow-lg transition-transform duration-300 ease-out\"\n              style={{\n                width: '50%',\n                transform: `translateX(${activeTab === 'hives' ? '100%' : '0%'})`\n              }}\n            />\n            \n            {tabs.map((tab) => {\n              const Icon = tab.icon;\n              return (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  className={`relative flex-1 py-2 px-3 rounded-lg text-sm font-bold transition-all duration-200 flex items-center justify-center space-x-1 z-10 ${\n                    activeTab === tab.id\n                      ? \"text-white\"\n                      : \"text-amber-800 hover:text-amber-600\"\n                  }`}\n                >\n                  <Icon className=\"w-4 h-4\" />\n                  <span>{tab.label}</span>\n                </button>\n              );\n            })}\n          </div>\n        </div>\n\n        {activeTab === \"buildings\" && (\n          <>\n            {/* Cash Display */}\n            <div className=\"bg-gradient-to-r from-green-200 to-green-300 rounded-2xl p-3 mb-4 border-2 border-green-400 shadow-lg\">\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 transform translate-y-0.5 bg-green-900/20 rounded-2xl -z-10\" />\n                <div className=\"flex justify-between items-center relative\">\n                  <span className=\"text-green-900 font-bold text-sm\">Available Cash</span>\n                  <span className=\"text-green-900 font-bold text-lg\">${currentCash.toLocaleString()}</span>\n                </div>\n                <div className=\"absolute top-0 left-2 w-3 h-3 bg-white/30 rounded-full blur-sm\" />\n              </div>\n            </div>\n\n            {/* Capacity and Utilization */}\n            <div className=\"bg-gradient-to-r from-amber-200 to-amber-300 rounded-2xl p-4 mb-6 border-2 border-amber-400 shadow-lg\">\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 transform translate-y-0.5 bg-amber-900/20 rounded-2xl -z-10\" />\n                <div className=\"relative\">\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-amber-900 font-bold\">Capacity</span>\n                    <span className=\"text-amber-900 font-bold\">{capacity.toLocaleString()}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-amber-900 font-bold\">Utilization</span>\n                    <span className=\"text-amber-900 font-bold\">{utilization}%</span>\n                  </div>\n                  <div className=\"bg-amber-500 h-2 rounded-full overflow-hidden\">\n                    <div \n                      className=\"bg-gradient-to-r from-amber-600 to-amber-700 h-full transition-all duration-300\"\n                      style={{ width: `${utilization}%` }}\n                    />\n                  </div>\n                </div>\n                <div className=\"absolute top-0 left-2 w-4 h-4 bg-white/30 rounded-full blur-md\" />\n              </div>\n            </div>\n\n            {/* Building Upgrades */}\n            <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n              {upgrades.map((upgrade) => {\n                const affordable = canAfford(upgrade.cost);\n                const maxed = upgrade.level >= upgrade.maxLevel;\n                \n                return (\n                  <div\n                    key={upgrade.id}\n                    className={`relative bg-gradient-to-r from-white to-amber-50 rounded-2xl p-4 border-2 shadow-lg ${\n                      maxed ? \"opacity-50\" : affordable ? \"border-amber-200\" : \"border-red-200\"\n                    }`}\n                  >\n                    {/* Shadow layer */}\n                    <div className=\"absolute inset-0 transform translate-y-1 bg-amber-900/10 rounded-2xl -z-10\" />\n                    \n                    <div className=\"flex items-center justify-between relative\">\n                      <div className=\"flex items-center space-x-3\">\n                        {/* Building icon */}\n                        <div className=\"w-10 h-10 bg-gradient-to-br from-amber-400 to-amber-600 rounded-full flex items-center justify-center shadow-lg border-2 border-white/50\">\n                          <Building className=\"w-5 h-5 text-white\" />\n                        </div>\n                        \n                        <div className=\"flex-1\">\n                          <div className=\"text-amber-900 font-bold text-sm\">{upgrade.name}</div>\n                          <div className=\"text-amber-700 text-xs\">{upgrade.description}</div>\n                          \n                          {/* Progress bar */}\n                          <div className=\"mt-1 bg-amber-200 h-1.5 rounded-full overflow-hidden\">\n                            <div \n                              className=\"bg-gradient-to-r from-amber-400 to-amber-500 h-full transition-all duration-300\"\n                              style={{ width: `${(upgrade.level / upgrade.maxLevel) * 100}%` }}\n                            />\n                          </div>\n                          <div className=\"text-amber-600 text-xs mt-1\">\n                            Level {upgrade.level}/{upgrade.maxLevel}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"text-right ml-3\">\n                        <div className={`font-bold text-sm ${affordable ? \"text-green-700\" : \"text-red-700\"}`}>\n                          ${upgrade.cost.toLocaleString()}\n                        </div>\n                        <button\n                          onClick={() => onUpgrade(upgrade.id)}\n                          disabled={!affordable || maxed}\n                          className={`px-3 py-1 rounded-lg text-xs font-bold mt-1 transition-all duration-200 ${\n                            maxed \n                              ? \"bg-gray-300 text-gray-500 cursor-not-allowed\"\n                              : affordable\n                                ? \"bg-gradient-to-r from-green-500 to-green-600 text-white hover:scale-105 active:scale-95 shadow-lg\"\n                                : \"bg-gray-300 text-gray-500 cursor-not-allowed\"\n                          }`}\n                        >\n                          {maxed ? \"MAX\" : \"UPGRADE\"}\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </>\n        )}\n\n        {activeTab === \"hives\" && (\n          <>\n            {/* Cash Display */}\n            <div className=\"bg-gradient-to-r from-green-200 to-green-300 rounded-2xl p-3 mb-4 border-2 border-green-400 shadow-lg\">\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 transform translate-y-0.5 bg-green-900/20 rounded-2xl -z-10\" />\n                <div className=\"flex justify-between items-center relative\">\n                  <span className=\"text-green-900 font-bold text-sm\">Available Cash</span>\n                  <span className=\"text-green-900 font-bold text-lg\">${currentCash.toLocaleString()}</span>\n                </div>\n                <div className=\"absolute top-0 left-2 w-3 h-3 bg-white/30 rounded-full blur-sm\" />\n              </div>\n            </div>\n\n            {/* Hive Grid */}\n            <div className=\"grid grid-cols-2 gap-3 mb-6\">\n              {hiveSlots.map((hive) => {\n                const occupancyPercentage = (hive.occupancy / hive.capacity) * 100;\n                const isSelected = selectedHiveSlot === hive.id;\n                \n                return (\n                  <button\n                    key={hive.id}\n                    onClick={() => setSelectedHiveSlot(isSelected ? null : hive.id)}\n                    className={`relative bg-gradient-to-r from-white to-amber-50 rounded-2xl p-3 border-2 shadow-lg transition-all duration-200 hover:scale-105 ${\n                      isSelected ? \"border-amber-400 ring-2 ring-amber-300\" : \"border-amber-200\"\n                    }`}\n                  >\n                    {/* Shadow layer */}\n                    <div className=\"absolute inset-0 transform translate-y-1 bg-amber-900/10 rounded-2xl -z-10\" />\n                    \n                    <div className=\"relative\">\n                      {/* Hive icon and tier */}\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"w-8 h-8 bg-gradient-to-br from-amber-400 to-amber-600 rounded-full flex items-center justify-center shadow-lg\">\n                          <Home className=\"w-4 h-4 text-white\" />\n                        </div>\n                        <div className=\"text-amber-900 font-bold text-xs\">\n                          T{hive.tier}/{hive.maxTier}\n                        </div>\n                      </div>\n                      \n                      {/* Hive name */}\n                      <div className=\"text-amber-900 font-bold text-sm mb-1\">\n                        {getHiveName(hive.tier)}\n                      </div>\n                      \n                      {/* Occupancy bar */}\n                      <div className=\"bg-amber-200 h-2 rounded-full overflow-hidden mb-1\">\n                        <div \n                          className={`bg-gradient-to-r ${getOccupancyColor(hive.occupancy, hive.capacity)} h-full transition-all duration-300`}\n                          style={{ width: `${Math.min(occupancyPercentage, 100)}%` }}\n                        />\n                      </div>\n                      \n                      {/* Capacity numbers */}\n                      <div className=\"text-amber-700 text-xs\">\n                        {hive.occupancy.toLocaleString()}/{hive.capacity.toLocaleString()}\n                      </div>\n                    </div>\n                  </button>\n                );\n              })}\n            </div>\n\n            {/* Detail Panel */}\n            {selectedHive && (\n              <div className=\"bg-gradient-to-r from-amber-200 to-amber-300 rounded-2xl p-4 mb-4 border-2 border-amber-400 shadow-lg\">\n                <div className=\"relative\">\n                  <div className=\"absolute inset-0 transform translate-y-0.5 bg-amber-900/20 rounded-2xl -z-10\" />\n                  \n                  <div className=\"relative\">\n                    <div className=\"text-amber-900 font-bold text-lg mb-3\">\n                      {getHiveName(selectedHive.tier)} (Slot {selectedHive.id})\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                      <div>\n                        <div className=\"text-amber-800 text-sm font-bold\">Capacity</div>\n                        <div className=\"text-amber-700 text-xs\">{selectedHive.capacity.toLocaleString()} bees</div>\n                      </div>\n                      <div>\n                        <div className=\"text-amber-800 text-sm font-bold\">Occupancy</div>\n                        <div className=\"text-amber-700 text-xs\">{Math.round((selectedHive.occupancy / selectedHive.capacity) * 100)}%</div>\n                      </div>\n                    </div>\n                    \n                    {/* Action buttons */}\n                    <div className=\"flex space-x-2\">\n                      <button\n                        onClick={() => onUpgradeHive?.(selectedHive.id)}\n                        disabled={selectedHive.tier >= selectedHive.maxTier || !canAfford(selectedHive.upgradeCost)}\n                        className={`flex-1 py-2 px-3 rounded-lg text-xs font-bold transition-all duration-200 flex items-center justify-center space-x-1 ${\n                          selectedHive.tier >= selectedHive.maxTier\n                            ? \"bg-gray-300 text-gray-500 cursor-not-allowed\"\n                            : canAfford(selectedHive.upgradeCost)\n                              ? \"bg-gradient-to-r from-green-500 to-green-600 text-white hover:scale-105 active:scale-95 shadow-lg\"\n                              : \"bg-gray-300 text-gray-500 cursor-not-allowed\"\n                        }`}\n                      >\n                        <ArrowUp className=\"w-3 h-3\" />\n                        <span>\n                          {selectedHive.tier >= selectedHive.maxTier \n                            ? \"MAX\" \n                            : `$${selectedHive.upgradeCost.toLocaleString()}`\n                          }\n                        </span>\n                      </button>\n                      \n                      <button\n                        onClick={() => onReplaceHive?.(selectedHive.id)}\n                        disabled={!canAfford(selectedHive.replaceCost)}\n                        className={`flex-1 py-2 px-3 rounded-lg text-xs font-bold transition-all duration-200 flex items-center justify-center space-x-1 ${\n                          canAfford(selectedHive.replaceCost)\n                            ? \"bg-gradient-to-r from-blue-500 to-blue-600 text-white hover:scale-105 active:scale-95 shadow-lg\"\n                            : \"bg-gray-300 text-gray-500 cursor-not-allowed\"\n                        }`}\n                      >\n                        <RefreshCw className=\"w-3 h-3\" />\n                        <span>${selectedHive.replaceCost.toLocaleString()}</span>\n                      </button>\n                    </div>\n                    \n                    {/* Warnings */}\n                    <div className=\"mt-2 text-amber-800 text-xs\">\n                      {selectedHive.tier < selectedHive.maxTier && (\n                        <div>💡 Upgrade increases capacity by 25%</div>\n                      )}\n                      <div>⚠️ Replace will refund 75% of current value</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"absolute top-0 left-2 w-4 h-4 bg-white/30 rounded-full blur-md\" />\n                </div>\n              </div>\n            )}\n\n            {/* Footer */}\n            <div className=\"text-center\">\n              <div className=\"text-amber-700 text-xs\">\n                🏠 Select a hive slot to upgrade or replace\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}"
        }
    ]
}